spring:
  shardingsphere:
    datasource:
      names: shardingmaster,shardingslave0,shardingslave1
      shardingmaster:
        type: com.zaxxer.hikari.HikariDataSource
        driver-class-name: org.h2.Driver
        jdbc-url: jdbc:h2:mem:master;MODE=MYSQL;DATABASE_TO_LOWER=TRUE;INIT=RUNSCRIPT FROM 'classpath:db/schema.sql'
        username: sa
        password: ""
      shardingslave0:
        type: com.zaxxer.hikari.HikariDataSource
        driver-class-name: org.h2.Driver
        jdbc-url: jdbc:h2:mem:slave1;MODE=MYSQL;DATABASE_TO_LOWER=TRUE;INIT=RUNSCRIPT FROM 'classpath:db/schema.sql'
        username: sa
        password: ""
      shardingslave1:
        type: com.zaxxer.hikari.HikariDataSource
        driver-class-name: org.h2.Driver
        jdbc-url: jdbc:h2:mem:slave2;MODE=MYSQL;DATABASE_TO_LOWER=TRUE;INIT=RUNSCRIPT FROM 'classpath:db/schema.sql'
        username: sa
        password: ""
    rules:
      sharding:
        tables:
          t_order:
            actualDataNodes: shardingmaster.t_order$->{0..1}
            tableStrategy:
              standard:
                shardingColumn: order_id
                shardingAlgorithmName: baomidou-inline
            keyGenerateStrategy:
              column: order_id
              keyGeneratorName: baomidou-snowflake
        sharding-algorithms:
          baomidou-inline:
            type: INLINE
            props:
              algorithm-expression: t_order$->{order_id % 2}
              allow-range-query-with-inline-sharding: true
        key-generators:
          baomidou-snowflake:
            type: SNOWFLAKE
            props:
              max-vibration-offset: 1
              max-tolerate-time-difference-milliseconds: 10
      readwrite-splitting:
        data-sources:
          baomidou-readwrite-data-sources:
            static-strategy:
              write-data-source-name: shardingmaster
              read-data-source-names: shardingslave0,shardingslave1
            load-balancer-name: baomidou-load-balance-algorithm
        load-balancers:
          baomidou-load-balance-algorithm:
            type: ROUND_ROBIN
  datasource:
    dynamic:
      datasource:
        master:
          username: sa
          password: ""
          url: jdbc:h2:mem:master;MODE=MYSQL;DATABASE_TO_LOWER=TRUE;INIT=RUNSCRIPT FROM 'classpath:db/schema.sql'
          driver-class-name: org.h2.Driver
        test:
          username: sa
          password: ""
          url: jdbc:h2:mem:test;MODE=MYSQL;DATABASE_TO_LOWER=TRUE;INIT=RUNSCRIPT FROM 'classpath:db/schema.sql'
          driver-class-name: org.h2.Driver
logging:
  level:
    com.baomidou: debug
    org.apache.shardingsphere: debug

#mybatis
mybatis:
  # 实体扫描，多个package用逗号或者分号分隔
  type-aliases-package: com.**.entity
  # 启动时是否检查 MyBatis XML 文件的存在，默认不检查
  check-config-location: false
  # 对应的 XML 文件位置
  mapper-locations: classpath*:mapper/**/*.xml
  configuration:
    default-statement-timeout: 30
    # 自动驼峰命名规则（camel case）映射
    map-underscore-to-camel-case: true
