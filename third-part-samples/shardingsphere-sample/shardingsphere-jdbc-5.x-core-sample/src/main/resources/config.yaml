dataSources:
  shardingmaster:
    dataSourceClassName: com.zaxxer.hikari.HikariDataSource
    driverClassName: org.h2.Driver
    jdbcUrl: jdbc:h2:mem:master;INIT=RUNSCRIPT FROM 'classpath:db/schema.sql'
    username: sa
    password:
  shardingslave0:
    dataSourceClassName: com.zaxxer.hikari.HikariDataSource
    driverClassName: org.h2.Driver
    jdbcUrl: jdbc:h2:mem:slave1;INIT=RUNSCRIPT FROM 'classpath:db/schema.sql'
    username: sa
    password:
  shardingslave1:
    dataSourceClassName: com.zaxxer.hikari.HikariDataSource
    driverClassName: org.h2.Driver
    jdbcUrl: jdbc:h2:mem:slave2;INIT=RUNSCRIPT FROM 'classpath:db/schema.sql'
    username: sa
    password:
    
rules:
- !SHARDING
  tables:
    t_order:
      actualDataNodes: shardingmaster.t_order$->{0..1}
      tableStrategy:
        standard:
          shardingColumn: order_id
          shardingAlgorithmName: baomidou_inline
      keyGenerateStrategy:
        column: order_id
        keyGeneratorName: baomidou_snowflake
  shardingAlgorithms:
    baomidou_inline:
      type: INLINE
      props:
        algorithm-expression: t_order$->{ORDER_ID % 2}
        allow-range-query-with-inline-sharding: true
  keyGenerators:
    baomidou_snowflake:
      type: SNOWFLAKE
- !READWRITE_SPLITTING
  dataSources:
    baomidou_readwrite_data_sources:
      writeDataSourceName: shardingmaster
      readDataSourceNames:
        - shardingslave0
        - shardingslave1
      loadBalancerName: baomidou_load_balance_algorithm
  loadBalancers:
    baomidou_load_balance_algorithm:
      type: ROUND_ROBIN
- !SINGLE
  tables:
    - "*.*"

props:
  sql-show: true
